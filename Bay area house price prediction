
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1) Web Scrapping Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#All the import for the entire code\n",
    "from urllib.request import urlopen, Request\n",
    "from bs4 import BeautifulSoup as BS\n",
    "import re\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from urllib.request import urlopen, Request\n",
    "from bs4 import BeautifulSoup as BS\n",
    "import re\n",
    "import pandas as pd\n",
    "\n",
    "#For example county = Alameda\n",
    "#https://www.redfin.com/county/303/CA/Alameda-County/new-listings\n",
    "#Fetch all the county urls\n",
    "def getCountyUrls():\n",
    "    home_page = Request('https://www.redfin.com/sitemap/CA/newest-homes', headers={'User-Agent': 'Mozilla/5.0'})\n",
    "    htmltext = urlopen(home_page).read()\n",
    "    home_page_soup = BS(htmltext,'html.parser')\n",
    "    county_urls = []\n",
    "    \n",
    "    for c_url in home_page_soup.findAll('a', attrs={'href': re.compile(\"^\\/county\")}):\n",
    "        c_url= c_url.get('href')\n",
    "        c_url= \"https://www.redfin.com\"+c_url\n",
    "        county_urls.append(c_url)\n",
    "    print(county_urls)\n",
    "    return (county_urls) #36 urls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Detail Url Example - https://www.redfin.com/CA/San-Leandro/661-Lee-Ave-94577/home/762354\n",
    "#Fetch detail urls from 5 pages of each county for NewListing properties\n",
    "def getDetailUrls_NewListings(c_url_list):\n",
    "    detail_urls = []\n",
    "    \n",
    "    #https://www.redfin.com/county/303/CA/Alameda-County/new-listings\n",
    "    for c_url in c_url_list:\n",
    "        #for page_no in range(1,6):\n",
    "        for page_no in range(1,2):\n",
    "            temp_url=c_url\n",
    "            if page_no>1:\n",
    "                temp_url = temp_url+\"/page-\"+str(page_no)\n",
    "            home_page = Request(temp_url, headers={'User-Agent': 'Mozilla/5.0'})\n",
    "            htmltext = urlopen(home_page).read()\n",
    "            home_page_soup = BS(htmltext,'html.parser')\n",
    "        \n",
    "            for d_url in home_page_soup.findAll('a', attrs={'href': re.compile(\"^\\/CA\")}):\n",
    "                d_url = d_url.get('href')\n",
    "                d_url = \"https://www.redfin.com\"+d_url\n",
    "                if (d_url not in detail_urls):\n",
    "                    detail_urls.append(d_url)\n",
    "    return (detail_urls) #returns maximum 100 d_urls for each county (for 5 pages)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fetch detail urls from 5 pages of each county for Sold properties\n",
    "def getDetailUrls_SoldProperty(c_url_list):\n",
    "    detail_urls = []\n",
    "    \n",
    "    #https://www.redfin.com/county/303/CA/Alameda-County/new-listings\n",
    "    for c_url in c_url_list:\n",
    "        c_url = c_url+'filter/include=sold-3mo'\n",
    "        #for page_no in range(1,6):\n",
    "        for page_no in range(1,2):\n",
    "            temp_url=c_url\n",
    "            if page_no>1:\n",
    "                temp_url = temp_url+\"/page-\"+str(page_no)\n",
    "            home_page = Request(temp_url, headers={'User-Agent': 'Mozilla/5.0'})\n",
    "            htmltext = urlopen(home_page).read()\n",
    "            home_page_soup = BS(htmltext,'html.parser')\n",
    "        \n",
    "            for d_url in home_page_soup.findAll('a', attrs={'href': re.compile(\"^\\/CA\")}):\n",
    "                d_url = d_url.get('href')\n",
    "                d_url = \"https://www.redfin.com\"+d_url\n",
    "                if (d_url not in detail_urls):\n",
    "                    detail_urls.append(d_url)\n",
    "    return (detail_urls) #returns maximum 100 d_urls for each county (for 5 pages)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to scrape data for new property\n",
    "def scrape_data_in_df_new_listings(detail_url_list):\n",
    "    address_list=[]\n",
    "    locality_list=[]\n",
    "    region_list=[]\n",
    "    postal_code_list=[]\n",
    "    price_list=[]\n",
    "    beds_list=[]\n",
    "    baths_list=[]\n",
    "    per_sq_ft_list=[]\n",
    "    area_list=[]\n",
    "    on_redfin_list=[]\n",
    "    status_list=[]\n",
    "    built_list=[]\n",
    "    type_list=[]\n",
    "    style_list=[]\n",
    "    view_list=[]\n",
    "    community_list=[]\n",
    "    mls_list=[]\n",
    "    lot_size_list=[]\n",
    "    stories_list=[]\n",
    "    county_list=[]\n",
    "    walkable_list=[]\n",
    "    walkableScore_list=[]\n",
    "    transit_list=[]\n",
    "    transitScore_list=[]\n",
    "    bikeable_list=[]\n",
    "    bikeableScore_list=[]\n",
    "    no_of_schools_list=[]\n",
    "    \n",
    "    \n",
    "    for count in range(len(detail_url_list)):\n",
    "        detail_url=detail_url_list[count]\n",
    "        detail_page = Request(detail_url, headers={'User-Agent': 'Mozilla/5.0'})\n",
    "        htmltext = urlopen(detail_page).read()\n",
    "        text = htmltext.decode(encoding=\"utf8\", errors='ignore')\n",
    "        detail_page_soup = BS(text,'html.parser')\n",
    "    \n",
    "        address=detail_page_soup.findAll('span', attrs={'class': \"street-address\"})\n",
    "        address_list.append(address[0].get_text() if len(address)>0 else 'NA')\n",
    "\n",
    "        locality=detail_page_soup.findAll('span', attrs={'class': \"locality\"})\n",
    "        locality_list.append(locality[0].get_text() if len(locality)>0 else 'NA')\n",
    "\n",
    "        region = detail_page_soup.findAll('span', attrs={'class': \"region\"})\n",
    "        region_list.append(region[0].get_text() if len(region)>0 else 'NA')\n",
    "\n",
    "        postal_code = detail_page_soup.findAll('span', attrs={'class': \"postal-code\"})\n",
    "        \n",
    "        postal_code = detail_page_soup.findAll('span', attrs={'class': \"postal-code\"})\n",
    "        postal_code_list.append(postal_code[0].get_text() if len([postal_code])>0 else 'NA')\n",
    "\n",
    "        price = detail_page_soup.findAll('div', attrs={'class': \"statsValue\"})\n",
    "        price_list.append(price[0].get_text() if len(price)>0 else 'NA')\n",
    "\n",
    "        beds = detail_page_soup.findAll('div', attrs={'data-rf-test-id': \"abp-beds\"})\n",
    "        beds_list.append(beds[0].get_text() if len(beds)>0 else 'NA')\n",
    "\n",
    "        baths = detail_page_soup.findAll('div', attrs={'data-rf-test-id': \"abp-baths\"})\n",
    "        baths_list.append(baths[0].get_text() if len(baths)>0 else 'NA')\n",
    "            \n",
    "        per_sq_ft = detail_page_soup.findAll('div', attrs={'data-rf-test-id': \"abp-priceperft\"})\n",
    "        per_sq_ft_list.append(per_sq_ft[0].get_text() if len(per_sq_ft)>0 else 'NA')\n",
    "\n",
    "        area = detail_page_soup.findAll('span', attrs={'class': \"statsValue\"})\n",
    "        area_list.append(area[0].get_text() if len(area)>0 else 'NA')\n",
    "        \n",
    "        #Borrowed rohit's On_Redfin logic\n",
    "        on_redfin_label = detail_page_soup.findAll('span',attrs={'class':'label'})\n",
    "        on_redfin = detail_page_soup.findAll('span',attrs={'class':'value'})\n",
    "        \n",
    "        for i in range(len(on_redfin_label)):\n",
    "            if on_redfin_label[i].string is not None:\n",
    "                if 'On Redfin' in on_redfin_label[i].string:\n",
    "                    on_redfin_list.append(on_redfin[i].get_text())\n",
    "\n",
    "        status = detail_page_soup.findAll('span', attrs={'class': \"DefinitionFlyoutLink inline-block underline clickable\"})\n",
    "        status_list.append(status[0].get_text() if len(status)>0 else 'NA')\n",
    "\n",
    "\n",
    "        keyFeatures=detail_page_soup.findAll('span', attrs={'class': \"header font-color-gray-light\"})\n",
    "        valueFeatures=detail_page_soup.findAll('span', attrs={'class': \"content text-right\"})\n",
    "        key_list=[]\n",
    "        value_list=[]\n",
    "        for count in range(len(keyFeatures)):\n",
    "            key_list.append(keyFeatures[count].get_text().lower()) #changed to Lowercase\n",
    "            value_list.append(valueFeatures[count].get_text())\n",
    "    \n",
    "        #HouseType\n",
    "        type1=['type','public details','property type'] #lowercase\n",
    "        key_index=-1\n",
    "        \n",
    "        for i in range(len(type1)):\n",
    "            if type1[i] in key_list:\n",
    "                key_index=key_list.index(type1[i])\n",
    "        \n",
    "        type_list.append(value_list[key_index] if key_index>=0 else 'NA')\n",
    "           \n",
    "        style_list.append(value_list[key_list.index('style')] if 'style' in key_list else 'NA')\n",
    "            \n",
    "        view_list.append(value_list[key_list.index('view')] if 'view' in key_list else 'NA')\n",
    "            \n",
    "        community_list.append(value_list[key_list.index('community')] if 'community' in key_list else 'NA')\n",
    "\n",
    "        county_list.append(value_list[key_list.index('county')] if 'county' in key_list else 'NA')\n",
    "\n",
    "        mls_list.append(value_list[key_list.index('mls#')] if 'mls#' in key_list else 'NA')\n",
    "\n",
    "        built_list.append(value_list[key_list.index('built')] if 'built' in key_list else 'NA')\n",
    "\n",
    "        lot_size_list.append(value_list[key_list.index('lot size')] if 'lot size' in key_list else 'NA')\n",
    "                      \n",
    "        stories_list.append(value_list[key_list.index('stories')] if 'stories' in key_list else 'NA')\n",
    "                   \n",
    "        transportMode=detail_page_soup.findAll('div', attrs={'class': \"transport-desc-and-label\"})\n",
    "        transportScore=detail_page_soup.findAll('div', attrs={'class': \"percentage\"})\n",
    "        transportKey_list=[]\n",
    "        transportValue_list=[]\n",
    "        counter=0\n",
    "        \n",
    "        for count in range(len(transportMode)):\n",
    "            transportKey_list.append(transportMode[count].get_text())\n",
    "            transportValue_list.append(transportScore[count].get_text())  \n",
    "        if any(x in transportKey_list for x in ['Very Walkable','Car-Dependent','Somewhat Walkable',\"Walker's Paradise\"]):    \n",
    "            walkable_list.append(transportKey_list[0])\n",
    "            walkableScore_list.append(transportValue_list[0])\n",
    "        else:\n",
    "            walkable_list.append('NA')\n",
    "            walkableScore_list.append('NA')\n",
    "            \n",
    "        if any(x in transportKey_list for x in ['Good Transit','Minimal Transit','Excellent Transit','Some Transit']):\n",
    "            transit_list.append(transportKey_list[1])\n",
    "            transitScore_list.append(transportValue_list[1])\n",
    "            counter=2\n",
    "        else:\n",
    "            transit_list.append('NA')\n",
    "            transitScore_list.append('NA')\n",
    "            counter=1  \n",
    "    \n",
    "        if any(x in transportKey_list for x in ['Very Bikeable','Somewhat Bikeable','Bikeable',\"Biker's Paradise\"]):    \n",
    "            bikeable_list.append(transportKey_list[counter])\n",
    "            bikeableScore_list.append(transportValue_list[counter])\n",
    "        else:\n",
    "            bikeable_list.append('NA')\n",
    "            bikeableScore_list.append('NA') \n",
    "            \n",
    "        no_of_schools=detail_page_soup.findAll('tr',attrs={'class':'schools-table-row'})\n",
    "        no_of_schools_list.append(len(no_of_schools))\n",
    "        \n",
    "    redfin_dataframe = pd.DataFrame(list(zip(address_list,locality_list,region_list,postal_code_list,price_list,beds_list,\n",
    "                                             baths_list,per_sq_ft_list,area_list,on_redfin_list,status_list,built_list,\n",
    "                                             type_list,style_list,view_list,community_list,mls_list,lot_size_list,\n",
    "                                             stories_list,county_list,walkable_list,walkableScore_list,\n",
    "                                             transit_list,transitScore_list,bikeable_list,bikeableScore_list,no_of_schools_list)),\n",
    "                                    columns=['address','locality','region','postal_code','price','beds','baths','per_sq_ft',\n",
    "                                             'area','on_redfin','status','built','type','style','view','community','mls',\n",
    "                                             'lot_size','stories','county','walkable','walkable Score','transit',\n",
    "                                             'transit score','bikeable','bikeable score','# of schools'])\n",
    "    return (redfin_dataframe)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to scrape data for sold property\n",
    "def scrape_data_sold_property(detail_url_list):\n",
    "    address_list=[]\n",
    "    locality_list=[]\n",
    "    region_list=[]\n",
    "    postal_code_list=[]\n",
    "    estimate_price_list=[] #changed\n",
    "    sold_price_list=[] #changed\n",
    "    sold_date_list = [] #changed\n",
    "    beds_list=[]\n",
    "    baths_list=[]\n",
    "    per_sq_ft_list=[]\n",
    "    area_list=[]\n",
    "    on_redfin_list=[]\n",
    "    status_list=[]\n",
    "    built_list=[]\n",
    "    type_list=[]\n",
    "    style_list=[]\n",
    "    view_list=[]\n",
    "    community_list=[]\n",
    "    mls_list=[]\n",
    "    lot_size_list=[]\n",
    "    stories_list=[]\n",
    "    county_list=[]\n",
    "    walkable_list=[]\n",
    "    walkableScore_list=[]\n",
    "    transit_list=[]\n",
    "    transitScore_list=[]\n",
    "    bikeable_list=[]\n",
    "    bikeableScore_list=[]\n",
    "    no_of_schools_list=[]\n",
    "    \n",
    "    for count in range(len(detail_url_list)):\n",
    "        detail_url=detail_url_list[count]\n",
    "        detail_page = Request(detail_url, headers={'User-Agent': 'Mozilla/5.0'})\n",
    "        htmltext = urlopen(detail_page).read()\n",
    "        text = htmltext.decode(encoding=\"utf8\", errors='ignore')\n",
    "        detail_page_soup = BS(text,'html.parser')\n",
    "    \n",
    "        address=detail_page_soup.findAll('span', attrs={'class': \"street-address\"})\n",
    "        address_list.append(address[0].get_text() if len(address)>0 else 'NA')\n",
    "\n",
    "        locality=detail_page_soup.findAll('span', attrs={'class': \"locality\"})\n",
    "        locality_list.append(locality[0].get_text() if len(locality)>0 else 'NA')\n",
    "\n",
    "        region = detail_page_soup.findAll('span', attrs={'class': \"region\"})\n",
    "        region_list.append(region[0].get_text() if len(region)>0 else 'NA')\n",
    "        \n",
    "        postal_code = detail_page_soup.findAll('span', attrs={'class': \"postal-code\"})\n",
    "        postal_code_list.append(postal_code[0].get_text() if len([postal_code])>0 else 'NA')\n",
    "                \n",
    "        price = detail_page_soup.findAll('div', attrs={'class': \"statsValue\"})\n",
    "        estimate_price_list.append(price[0].get_text() if len(price)>0 else 'NA') #changed\n",
    "        sold_price_list.append(price[1].get_text() if len(price)>0 else 'NA') #changed\n",
    "        \n",
    "        sold_date = detail_page_soup.findAll('span',attrs={'class':'HomeSash','data-rf-test-id':'home-sash'}) #New\n",
    "        sold_date_list.append(sold_date[0].get_text()) #New\n",
    "\n",
    "        beds = detail_page_soup.findAll('div', attrs={'data-rf-test-id': \"abp-beds\"})\n",
    "        beds_list.append(beds[0].get_text() if len(beds)>0 else 'NA')\n",
    "\n",
    "        baths = detail_page_soup.findAll('div', attrs={'data-rf-test-id': \"abp-baths\"})\n",
    "        baths_list.append(baths[0].get_text() if len(baths)>0 else 'NA')\n",
    "\n",
    "        per_sq_ft = detail_page_soup.findAll('div', attrs={'data-rf-test-id': \"abp-priceperft\"})\n",
    "        per_sq_ft_list.append(per_sq_ft[0].get_text() if len(per_sq_ft)>0 else 'NA')\n",
    "\n",
    "        area = detail_page_soup.findAll('span', attrs={'class': \"statsValue\"})\n",
    "        area_list.append(area[0].get_text() if len(area)>0 else 'NA')\n",
    "    \n",
    "        built = detail_page_soup.findAll('span', attrs={'class': \"value\"})\n",
    "        on_redfin = built[2].get_text() if len(built)>2 else 'NA'\n",
    "        on_redfin_list.append(on_redfin)\n",
    "        \n",
    "        on_redfin_label = detail_page_soup.findAll('span',attrs={'class':'label'})\n",
    "        on_redfin = detail_page_soup.findAll('span',attrs={'class':'value'})\n",
    "        \n",
    "        for i in range(len(on_redfin_label)):\n",
    "            if on_redfin_label[i].string is not None:\n",
    "                if 'On Redfin' in on_redfin_label[i].string:\n",
    "                    on_redfin_list.append(on_redfin[i].get_text())\n",
    "\n",
    "        status = detail_page_soup.findAll('span', attrs={'class': \"DefinitionFlyoutLink inline-block underline clickable\"})\n",
    "        status_list.append(status[0].get_text() if len(status)>0 else 'NA')\n",
    "\n",
    "        keyFeatures=detail_page_soup.findAll('span', attrs={'class': \"header font-color-gray-light\"})\n",
    "        valueFeatures=detail_page_soup.findAll('span', attrs={'class': \"content text-right\"})\n",
    "        key_list=[]\n",
    "        value_list=[]\n",
    "        for count in range(len(keyFeatures)):\n",
    "            key_list.append(keyFeatures[count].get_text().lower()) #changed to Lowercase\n",
    "            value_list.append(valueFeatures[count].get_text())\n",
    "    \n",
    "        #HouseType\n",
    "        type1=['type','public details','property type']\n",
    "        key_index=-1\n",
    "        \n",
    "        for i in range(len(type1)):\n",
    "            if type1[i] in key_list:\n",
    "                key_index=key_list.index(type1[i])\n",
    "        \n",
    "        type_list.append(value_list[key_index] if key_index>=0 else 'NA')\n",
    "           \n",
    "        style_list.append(value_list[key_list.index('style')] if 'style' in key_list else 'NA')\n",
    "            \n",
    "        view_list.append(value_list[key_list.index('view')] if 'view' in key_list else 'NA')\n",
    "            \n",
    "        community_list.append(value_list[key_list.index('community')] if 'community' in key_list else 'NA')\n",
    "\n",
    "        county_list.append(value_list[key_list.index('county')] if 'county' in key_list else 'NA')\n",
    "\n",
    "        mls_list.append(value_list[key_list.index('mls#')] if 'mls#' in key_list else 'NA')\n",
    "\n",
    "        built_list.append(value_list[key_list.index('built')] if 'built' in key_list else 'NA')\n",
    "\n",
    "        lot_size_list.append(value_list[key_list.index('lot size')] if 'lot size' in key_list else 'NA')\n",
    "                      \n",
    "        #Stories\n",
    "        stories_list.append(value_list[key_list.index('stories')] if 'stories' in key_list else 'NA')\n",
    "\n",
    "    \n",
    "        transportMode=detail_page_soup.findAll('div', attrs={'class': \"transport-desc-and-label\"})\n",
    "        transportScore=detail_page_soup.findAll('div', attrs={'class': \"percentage\"})\n",
    "        transportKey_list=[]\n",
    "        transportValue_list=[]\n",
    "        counter=0\n",
    "        \n",
    "        for count in range(len(transportMode)):\n",
    "            transportKey_list.append(transportMode[count].get_text())\n",
    "            transportValue_list.append(transportScore[count].get_text())  \n",
    "        if any(x in transportKey_list for x in ['Very Walkable','Car-Dependent','Somewhat Walkable',\"Walker's Paradise\"]):    \n",
    "            walkable_list.append(transportKey_list[0])\n",
    "            walkableScore_list.append(transportValue_list[0])\n",
    "        else:\n",
    "            walkable_list.append('NA')\n",
    "            walkableScore_list.append('NA')\n",
    "            \n",
    "        if any(x in transportKey_list for x in ['Good Transit','Minimal Transit','Excellent Transit','Some Transit']):\n",
    "            transit_list.append(transportKey_list[1])\n",
    "            transitScore_list.append(transportValue_list[1])\n",
    "            counter=2\n",
    "        else:\n",
    "            transit_list.append('NA')\n",
    "            transitScore_list.append('NA')\n",
    "            counter=1  \n",
    "    \n",
    "        if any(x in transportKey_list for x in ['Very Bikeable','Somewhat Bikeable','Bikeable',\"Biker's Paradise\"]):    \n",
    "            bikeable_list.append(transportKey_list[counter])\n",
    "            bikeableScore_list.append(transportValue_list[counter])\n",
    "        else:\n",
    "            bikeable_list.append('NA')\n",
    "            bikeableScore_list.append('NA')\n",
    "            \n",
    "        no_of_schools=detail_page_soup.findAll('tr',attrs={'class':'schools-table-row'})\n",
    "        no_of_schools_list.append(len(no_of_schools))\n",
    "        \n",
    "    redfin_dataframe = pd.DataFrame(list(zip(address_list,locality_list,region_list,postal_code_list,estimate_price_list,\n",
    "                                             sold_price_list,sold_date_list,beds_list,\n",
    "                                             baths_list,per_sq_ft_list,area_list,on_redfin_list,status_list,built_list,\n",
    "                                             type_list,style_list,view_list,community_list,mls_list,lot_size_list,\n",
    "                                             stories_list,county_list,walkable_list,walkableScore_list,transit_list,transitScore_list,\n",
    "                                             bikeable_list,bikeableScore_list,no_of_schools_list)),\n",
    "                                    columns=['address','locality','region','postal_code','estimate_price','sold_price_list',\n",
    "                                             'sold_date_list','beds','baths','per_sq_ft','area','on_redfin','status','built','type','style','view','community','mls',\n",
    "                                             'lot_size','stories','county','walkable','walkable Score','transit','transit score','bikeable',\n",
    "                                             'bikeable score','# of schools'])\n",
    "\n",
    "    \n",
    "    return (redfin_dataframe)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to save scrapped data into an excel file\n",
    "def write_in_excel(data_frame_new,data_frame_sold):\n",
    "    writer=pd.ExcelWriter('Redfin.xlsx')\n",
    "    data_frame_new.to_excel(writer,'NewListings',index=False)\n",
    "    data_frame_sold.to_excel(writer,'SoldProperty',index=False)\n",
    "    writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "county_url_list = []\n",
    "detail_url_list = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "*****************counties urls*****************:\n",
      "\n",
      " ['https://www.redfin.com/county/303/CA/Alameda-County/new-listings', 'https://www.redfin.com/county/305/CA/Amador-County/new-listings', 'https://www.redfin.com/county/306/CA/Butte-County/new-listings', 'https://www.redfin.com/county/307/CA/Calaveras-County/new-listings', 'https://www.redfin.com/county/309/CA/Contra-Costa-County/new-listings', 'https://www.redfin.com/county/311/CA/El-Dorado-County/new-listings', 'https://www.redfin.com/county/312/CA/Fresno-County/new-listings', 'https://www.redfin.com/county/313/CA/Glenn-County/new-listings', 'https://www.redfin.com/county/317/CA/Kern-County/new-listings', 'https://www.redfin.com/county/319/CA/Lake-County/new-listings', 'https://www.redfin.com/county/321/CA/Los-Angeles-County/new-listings', 'https://www.redfin.com/county/322/CA/Madera-County/new-listings', 'https://www.redfin.com/county/323/CA/Marin-County/new-listings', 'https://www.redfin.com/county/326/CA/Merced-County/new-listings', 'https://www.redfin.com/county/329/CA/Monterey-County/new-listings', 'https://www.redfin.com/county/330/CA/Napa-County/new-listings', 'https://www.redfin.com/county/331/CA/Nevada-County/new-listings', 'https://www.redfin.com/county/332/CA/Orange-County/new-listings', 'https://www.redfin.com/county/333/CA/Placer-County/new-listings', 'https://www.redfin.com/county/335/CA/Riverside-County/new-listings', 'https://www.redfin.com/county/336/CA/Sacramento-County/new-listings', 'https://www.redfin.com/county/337/CA/San-Benito-County/new-listings', 'https://www.redfin.com/county/338/CA/San-Bernardino-County/new-listings', 'https://www.redfin.com/county/339/CA/San-Diego-County/new-listings', 'https://www.redfin.com/county/340/CA/San-Francisco-County/new-listings', 'https://www.redfin.com/county/341/CA/San-Joaquin-County/new-listings', 'https://www.redfin.com/county/342/CA/San-Luis-Obispo-County/new-listings', 'https://www.redfin.com/county/343/CA/San-Mateo-County/new-listings', 'https://www.redfin.com/county/344/CA/Santa-Barbara-County/new-listings', 'https://www.redfin.com/county/345/CA/Santa-Clara-County/new-listings', 'https://www.redfin.com/county/346/CA/Santa-Cruz-County/new-listings', 'https://www.redfin.com/county/350/CA/Solano-County/new-listings', 'https://www.redfin.com/county/351/CA/Sonoma-County/new-listings', 'https://www.redfin.com/county/352/CA/Stanislaus-County/new-listings', 'https://www.redfin.com/county/358/CA/Ventura-County/new-listings', 'https://www.redfin.com/county/359/CA/Yolo-County/new-listings']\n",
      "\n",
      "*****************Top 5 New Property urls from 1st page of 1st county:*****************\n",
      "\n",
      " ['https://www.redfin.com/CA/Pleasanton/3105-Chardonnay-Dr-94566/home/1494821', 'https://www.redfin.com/CA/Fremont/935-Cherry-Glen-Cir-94536/unit-219/home/1443403', 'https://www.redfin.com/CA/Castro-Valley/20236-San-Miguel-Ave-94546/home/818938', 'https://www.redfin.com/CA/Dublin/6645-Spruce-Ln-94568/home/1429042', 'https://www.redfin.com/CA/Livermore/205-Stratus-Cmn-94550/home/97575642']\n",
      "\n",
      "*****************New Listing Data*****************\n",
      "\n",
      "                            address         locality region postal_code  \\\n",
      "0  3105 Chardonnay Dr, Pleasanton      Pleasanton,      CA       94566   \n",
      "1        935 Cherry Glen Cir #219         Fremont,      CA       94536   \n",
      "2            20236 San Miguel Ave   Castro Valley,      CA       94546   \n",
      "3                  6645 Spruce Ln          Dublin,      CA       94568   \n",
      "4                 205 Stratus Cmn       Livermore,      CA       94550   \n",
      "\n",
      "        price   beds     baths       per_sq_ft   area on_redfin  ... lot_size  \\\n",
      "0  $1,399,000  4Beds  2.5Baths  $561 / Sq. Ft.  2,494  19 hours  ...       NA   \n",
      "1    $699,777  2Beds    2Baths  $599 / Sq. Ft.  1,168    2 days  ...       NA   \n",
      "2    $524,888  2Beds  1.5Baths  $532 / Sq. Ft.    986    8 days  ...       NA   \n",
      "3    $898,888  3Beds    2Baths  $614 / Sq. Ft.  1,464    8 days  ...       NA   \n",
      "4    $744,888  3Beds  2.5Baths  $522 / Sq. Ft.  1,428    7 days  ...       NA   \n",
      "\n",
      "  stories county           walkable walkable Score       transit  \\\n",
      "0      NA     NA      Car-Dependent       40 / 100  Some Transit   \n",
      "1      NA     NA      Car-Dependent       35 / 100  Good Transit   \n",
      "2      NA     NA      Very Walkable       80 / 100  Some Transit   \n",
      "3      NA     NA  Somewhat Walkable       58 / 100            NA   \n",
      "4      NA     NA      Car-Dependent       22 / 100            NA   \n",
      "\n",
      "  transit score       bikeable bikeable score # of schools  \n",
      "0      30 / 100       Bikeable       58 / 100            3  \n",
      "1      52 / 100       Bikeable       68 / 100            3  \n",
      "2      37 / 100       Bikeable       63 / 100            5  \n",
      "3            NA  Very Bikeable       82 / 100            3  \n",
      "4            NA       Bikeable       55 / 100            3  \n",
      "\n",
      "[5 rows x 27 columns]\n",
      "\n",
      "*****************Top 5 Sold Property urls from 1st page of 1st county:*****************\n",
      "\n",
      " ['https://www.redfin.com/CA/Oakland/1202-61st-St-94608/home/549835', 'https://www.redfin.com/CA/Oakland/90-Starview-Dr-94618/home/1269111', 'https://www.redfin.com/CA/Oakland/1042-61st-St-94608/home/531535', 'https://www.redfin.com/CA/Oakland/438-W-Grand-Ave-94612/unit-515/home/22671689', 'https://www.redfin.com/CA/Hayward/415-Westchester-St-94544/home/1884414']\n"
     ]
    }
   ],
   "source": [
    "# main function to exceute data scrapping \n",
    "if __name__ == \"__main__\":\n",
    "\n",
    "    \n",
    "    #returns urls for 36 counties\n",
    "    county_url_list = getCountyUrls()   \n",
    "    print(\"\\n*****************counties urls*****************:\\n\\n\", county_url_list)\n",
    "\n",
    "    #for new listings\n",
    "    n_detail_url_list = getDetailUrls_NewListings(county_url_list[0])\n",
    "    print(\"\\n*****************Top 5 New Property urls from 1st page of 1st county:*****************\\n\\n\",n_detail_url_list[:5])\n",
    "\n",
    "    data_frame_new = scrape_data_in_df_new_listings(n_detail_url_list[0:10]) #3373 Records\n",
    "    print(\"\\n*****************New Listing Data*****************\\n\\n\",data_frame_new.head())\n",
    "\n",
    "    #for sold property\n",
    "    s_detail_url_list = getDetailUrls_SoldProperty(county_url_list[0])\n",
    "    print(\"\\n*****************Top 5 Sold Property urls from 1st page of 1st county:*****************\\n\\n\",s_detail_url_list[:5])\n",
    "    \n",
    "    data_frame_sold = scrape_data_sold_property(s_detail_url_list[:5]) #3448 Records\n",
    "\n",
    "    to write the data into the excel\n",
    "    write_in_excel(data_frame_new,data_frame_sold)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2) Collating Files Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#[ACTION]:Set the path to required folder contains files those need to merge\n",
    "data_dir = 'C:\\\\Users\\\\stsc.LNVO-126957\\\\Data Analytics\\\\Web Scraping\\\\Data\\\\New Listings'\n",
    "all_files_name = os.listdir(data_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check the files present in the folder\n",
    "all_files_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# adding all files into one dataframe\n",
    "count_of_files = 1\n",
    "\n",
    "df_final = pd.read_excel(data_dir + \"\\\\\" + all_files_name[0])\n",
    "if df_final.columns[0] == 'Unnamed: 0':\n",
    "    df_final = df_final.drop('Unnamed: 0',axis=1) #removing index column if its there\n",
    "\n",
    "\n",
    "for i in range(len(all_files_name)-1):\n",
    "    df = pd.read_excel(data_dir + \"\\\\\" + all_files_name[i+1])\n",
    "    if df.columns[0] == 'Unnamed: 0': #removing index column if its there\n",
    "        df = df.drop('Unnamed: 0',axis=1)\n",
    "    df_final = df_final.append(df,ignore_index=True)\n",
    "    count_of_files = 1 + count_of_files\n",
    "\n",
    "print(\"%d files appended\"%count_of_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check the length of the final dataframe\n",
    "len(df_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to save collated data into an excel file\n",
    "def write_in_excel_final(df_final):\n",
    "    writer=pd.ExcelWriter('Redfin_NewListing_Collated.xlsx') \n",
    "    df_final.to_excel(writer,'NewListing',index=False)\n",
    "    writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Execute the collate function\n",
    "write_in_excel_final(df_final)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3) Data Cleaning Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Cleaning Function\n",
    "def data_cleaning(df):\n",
    "    \n",
    "    #converting Area to numeric\n",
    "    df['area'] = df['area'].str.replace(',', '').str.strip().str.replace('—','')\n",
    "    df['area'] = pd.to_numeric(df['area'], errors='coerce',downcast='float')\n",
    "\n",
    "    \n",
    "    #removing 'Baths' or 'Bath' from baths field\n",
    "    df['baths'] = df['baths'].str.replace('Baths', '').str.strip().str.replace('Baths','')\n",
    "    df['baths'] = pd.to_numeric(df['baths'], errors='coerce',downcast='float')\n",
    "    \n",
    "    #removing 'Baths' or 'Bath' from baths field\n",
    "    df['beds'] = df['beds'].str.replace('Beds', '').str.strip().str.replace('Beds','')\n",
    "    df['beds'] = pd.to_numeric(df['beds'], errors='coerce',downcast='float')\n",
    "    \n",
    "    #removing '/100' from score\n",
    "    df['bikeable score'] = df['bikeable score'].str.replace(' / 100', '').str.strip()\n",
    "    df['bikeable score'] = pd.to_numeric(df['bikeable score'], errors='coerce',downcast='float')\n",
    "    \n",
    "    df['walkable Score'] = df['walkable Score'].str.replace(' / 100', '').str.strip()\n",
    "    df['walkable Score'] = pd.to_numeric(df['walkable Score'], errors='coerce',downcast='float')\n",
    "    \n",
    "    df['transit score'] = df['transit score'].str.replace(' / 100', '').str.strip()\n",
    "    df['transit score'] = pd.to_numeric(df['transit score'], errors='coerce',downcast='float')\n",
    "    \n",
    "    #removing '/Sq. Ft.' text from field\n",
    "    df['per_sq_ft'] = df['per_sq_ft'].str.replace(' / Sq. Ft.', '').str.strip().str.replace('$', '')\n",
    "    df['per_sq_ft'] = pd.to_numeric(df['per_sq_ft'], errors='coerce',downcast='float')\n",
    "    \n",
    "    #removing \",\" from locality field\n",
    "    df['locality'] = df['locality'].str.replace(',', '').str.strip()\n",
    "        \n",
    "    #Code to clean property type\n",
    "    agri = set(['Agricultural', 'Agriculture/Ranch Land'])\n",
    "\n",
    "    cabin = set([\"Cabin\"])\n",
    "\n",
    "    commercial = set([\"Commercial Lot\"])\n",
    "\n",
    "    coop = set([\"Hi-Rise (9+), Luxury, Stock Cooperative\",\n",
    "    \"Mid-Rise (4-8), 1 Level, Luxury, Stock Cooperative\"])\n",
    "\n",
    "    farm = set([\"Farm/Ranch\",\n",
    "    \"A, Farm, Housing Estate\",\n",
    "    \"Farms and Ranches\"])\n",
    "\n",
    "    condo = set([\"Condo/Coop, Has Garage\",\n",
    "    \"Condominium\",\n",
    "    \"Condominium, Attached, Townhouse\",\n",
    "    \"Condominium, Attached\",\n",
    "    \"Residential, Condo/Townhouse\",\n",
    "    \"Condo/Coop\",\n",
    "    \"Condominium, Planned Unit Develop\",\n",
    "    \"Condominium, Attached, Townhouse, Planned Unit Develop\",\n",
    "    \"Condominium, Live/Work, Loft, Custom\",\n",
    "    \"Condo/Coop, Has Garage, Has View\",\n",
    "    \"A, Condo/Townhouse, Condo/Co-Op\",\n",
    "    \"Flat, 1 Level, Condominium\",\n",
    "    \"Mid-Rise (4-8), Loft Condominium\",\n",
    "    \"Junior, Modified, Condominium\",\n",
    "    \"Luxury, Condominium\",\n",
    "    \"Hi-Rise (9+), Condominium\",\n",
    "    \"Mid-Rise (4-8), End Unit, Condominium\",\n",
    "    \"Mid-Rise (4-8), Unit Above, Unit Below, End Unit, 1 Level, Condominium\",\n",
    "    \"Top Floor, Tenancy In Common\",\n",
    "    \"Tenancy In Common\",\n",
    "    \"Full, Hi-Rise (9+), Unit Above, Unit Below, Condominium\",\n",
    "    \"Low-Rise (1-3), Top Floor, 1 Level, Condominium\",\n",
    "    \"Flat, Tenancy In Common\",\n",
    "    \"Attached, 3 Level, Luxury, Condominium\",\n",
    "    \"Top Floor, Condominium\",\n",
    "    \"Low-Rise (1-3), Unit Above, Unit Below, 1 Level, Condominium\",\n",
    "    \"Full, Flat, Top Floor, 1 Level, Condominium\",\n",
    "    \"Mid-Rise (4-8), Unit Above, 1 Level, Condominium\",\n",
    "    \"Townhouse, Low-Rise (1-3), Top Floor, Unit Below, End Unit, 2 Level, Condominium\",\n",
    "    \"Flat, Low-Rise (1-3), Condominium\",\n",
    "    \"Mid-Rise (4-8), Unit Above, Unit Below, Condominium\",\n",
    "    \"Mid-Rise (4-8), 1 Level, Luxury, Condominium\",\n",
    "    \"Mid-Rise (4-8), Condominium\",\n",
    "    \"Full, Unit Above, Unit Below, Luxury, New Construction, Condominium\",\n",
    "    \"Low-Rise (1-3), Top Floor, Unit Below, Condominium\",\n",
    "    \"Residential, Condominium/Townhouse\",\n",
    "    \"Condominium, Residential Condo/Co-Op\",\n",
    "    \"Residential Condo/Co-Op\",\n",
    "    \"Condominium, Attached, Planned Unit Develop\",\n",
    "    \"Residential, Condo-PUD\",\n",
    "    \"3 Level, Loft Condominium\",\n",
    "    \"1 Level, Luxury, Condominium\",\n",
    "    \"Loft\",\n",
    "    \"1 Level, Condominium\",\n",
    "    \"2 Level, Condominium\",\n",
    "    \"2 Level, Condominium\",\n",
    "    \"2 Level, Loft Condominium\",\n",
    "    \"2 Level, Luxury, Condominium\",\n",
    "    \"Condominium, Attached, Loft\",\n",
    "    \"Condominium, Attached, Loft, Planned Unit Develop\",\n",
    "    \"Condominium, Attached, Zero Lot Line\",\n",
    "    \"Flat, Condominium\",\n",
    "    \"Flat, Hi-Rise (9+), 1 Level, Luxury, Condominium\",\n",
    "    \"Flat, Low-Rise (1-3), Top Floor, Unit Below, Condominium\",\n",
    "    \"Full, Flat, Low-Rise (1-3), Semi-Attached, Top Floor, Unit Below, Condominium\",\n",
    "    \"Full, Flat, Top Floor, Condominium\",\n",
    "    \"Hi-Rise (9+), Luxury, Condominium\",\n",
    "    \"Hi-Rise (9+), Luxury, New Construction, Condominium\",\n",
    "    \"Live/Work, Low-Rise (1-3), 3 Level, Condominium\",\n",
    "    \"Live/Work, Low-Rise (1-3), Ground Floor, Unit Above, Condominium\",\n",
    "    \"Live/Work, Luxury, Loft Condominium\",\n",
    "    \"Live/Work, Mid-Rise (4-8), 3 Level, Loft Condominium\",\n",
    "    \"Loft Condominium\",\n",
    "    \"Low-Rise (1-3), 1 Level, Condominium\",\n",
    "    \"Low-Rise (1-3), Condominium\",\n",
    "    \"Low-Rise (1-3), Condominium\",\n",
    "    \"Low-Rise (1-3), Condominium\",\n",
    "    \"Low-Rise (1-3), Top Floor, 2 Level, Condominium\",\n",
    "    \"Low-Rise (1-3), Top Floor, 2 Level, Luxury, Loft Condominium\",\n",
    "    \"Low-Rise (1-3), Unit Above, 2 Level, Condominium\",\n",
    "    \"Low-Rise (1-3), Unit Above, 2 Level, Condominium\",\n",
    "    \"Mid-Rise (4-8), 1 Level, Luxury, New Construction, Condominium\",\n",
    "    \"Mid-Rise (4-8), Top Floor, Condominium\",\n",
    "    \"Mid-Rise (4-8), Top Floor, Condominium\",\n",
    "    \"Penthouse, Mid-Rise (4-8), Top Floor, End Unit, 1 Level, Luxury, New Construction, Condominium\",\n",
    "    \"Residential, Condo-PUD, Single Family\",\n",
    "    \"Studio, Hi-Rise (9+), End Unit, Condominium\",\n",
    "    \"Studio, Hi-Rise (9+), Unit Above, Unit Below, End Unit, Condominium\",\n",
    "    \"Flat, 1 Level, Tenancy In Common\",\n",
    "    \"Flat, Low-Rise (1-3), Attached, Top Floor, Unit Below, 1 Level, Tenancy In Common\",\n",
    "    \"Flat, Low-Rise (1-3), Tenancy In Common\",\n",
    "    \"Low-Rise (1-3), End Unit, 1 Level, Tenancy In Common\",\n",
    "    \"Flat, Low-Rise (1-3), Unit Above, Unit Below, Tenancy In Common\",\n",
    "    \"Townhouse, Low-Rise (1-3), Condominium\",\n",
    "    \"Townhouse, Residential Condo/Co-Op\",\n",
    "    \"Townhouse, Condominium\",\n",
    "    \"Condominium, Attached, Townhouse, Zero Lot Line, Semi-Custom\",\n",
    "    \"Condominium, Townhouse\"])\n",
    "\n",
    "    lots = set([\"Residential Lot\",\n",
    "    \"Residential Acreage\",\n",
    "    \"Lots & Land\",\n",
    "    \"Residential Development Land\",\n",
    "    \"Vacant Land\",\n",
    "    \"Recreation\",\n",
    "    \"Residential Land\",\n",
    "    \"Lots/Land, Residential Lot\",\n",
    "    \"Lots/Land, Acreage\",\n",
    "    \"Lots\",\n",
    "    \"Lots and Land, Acreage\",\n",
    "    \"Lots and Land, Lot\",\n",
    "    \"Land/Entitlements, Vacant Land\",\n",
    "    \"Lots & Acreage\",\n",
    "    \"Other Residential Land (See Remarks)\",\n",
    "    \"C, Land, Single Family Residential\"])\n",
    "\n",
    "    mobile = set([\"Single Wide, Manufactured\",\n",
    "    \"Double Wide, Manufactured\",\n",
    "    \"Manufactured on Land\",\n",
    "    \"Double Wide, Manufactured, Remodeled/Updated\",\n",
    "    \"Double Wide, Mobile Home\",\n",
    "    \"Park Model, Remodeled/Updated\",\n",
    "    \"Single Wide, Mobile Home, Remodeled/Updated\",\n",
    "    \"Single Wide, Mobile Home\",\n",
    "    \"Double-Wide Mobile Home\",\n",
    "    \"Single-Wide Mobile Home\",\n",
    "    \"A, Mobile/Manufactured Homes, Manufactured Housing\",\n",
    "    \"Park Model, Manufactured\",\n",
    "    \"Double Wide, Manufactured, Mobile Home\",\n",
    "    \"Double Wide, Mobile Home, Remodeled/Updated\",\n",
    "    \"1 House on Lot, Detached, Mobile Home\",\n",
    "    \"1 House on Lot, Mobile Home, Ranchette/Country\",\n",
    "    \"Single Wide, Fixer, Mobile Home\",\n",
    "    \"Single Wide, Manufactured, Mobile Home\",\n",
    "    \"Triple Wide, Mobile Home\",\n",
    "    \"Residential, Manufactured Home\",\n",
    "    \"Modular/Manufactured\",\n",
    "    \"Double Wide, Remodeled/Updated\",\n",
    "    \"1 House on Lot, Detached, Modular, Manufactured\",\n",
    "    \"1 House on Lot, Detached, Manufactured, Fixer\",\n",
    "    \"1 House on Lot, Detached, Manufactured, Ranchette/Country\",\n",
    "    \"1 House on Lot, Manufactured\"])\n",
    "\n",
    "    multi = set([\"Fourplex\",\n",
    "    \"Multi-Family, Duplex/Triplex/Fourplex\",\n",
    "    \"Multi-Family, Triplex\",\n",
    "    \"Multi-Family, Apartment Building (5-12 Units)\",\n",
    "    \"Multi-Family (2-4 Unit), Has Garage\",\n",
    "    \"Duplex\",\n",
    "    \"Triplex\",\n",
    "    \"Apartments, Flat, Apartments, Mixed Use, 3 Stories, Retail, Flat, Mixed Use, 5-15 Units, Retail\",\n",
    "    \"Duplex, 2 Units\",\n",
    "    \"Multi Family\",\n",
    "    \"Mixed Use/Other Multi-Unit\",\n",
    "    \"Residential Income, 2 Houses on 1 Lot\",\n",
    "    \"Quadruplex\",\n",
    "    \"Residential Income\",\n",
    "    \"B, Multi-Family\",\n",
    "    \"Triplex, 4 Units, 3 Units\",\n",
    "    \"Residential Income, 3 Units\",\n",
    "    \"Residential Income, Duplex\",\n",
    "    \"5-15 Units\",\n",
    "    \"Apartment\",\n",
    "    \"2 Houses on Lot, Detached, Live/Work, Semi-Custom, Ranchette/Country\",\n",
    "    \"2 Houses on Lot, Detached, Manufactured, Semi-Custom, Ranchette/Country\",\n",
    "    \"2 Houses on Lot, Ranchette/Country\",\n",
    "    \"2 Houses on Lot, Custom\",\n",
    "    \"3+ Houses on Lot, Custom\",\n",
    "    \"2 Houses on Lot, Fixer\",\n",
    "    \"3+ Houses on Lot, Detached\",\n",
    "    \"2 Houses on Lot, Detached\", \n",
    "    \"2 Houses on Lot, Detached, Fixer, Ranchette/Country\",\n",
    "    \"2 Houses on Lot, Detached, Custom, Ranchette/Country\",\n",
    "    \"5+ Units\",\n",
    "    \"3+ Houses on Lot, Detached, Ranchette/Country\",\n",
    "    \"4 Story, 3 Units\",\n",
    "    \"3 Units\",\n",
    "    \"2 Houses on Lot, Custom, Ranchette/Country\",\n",
    "    \"2 Houses on Lot, Detached, Custom\"])\n",
    "\n",
    "    other = set([\"Other\",\n",
    "    \"Other, Expando\",\n",
    "    \"All Other Attached\",\n",
    "    \"Other Residential\"])\n",
    "\n",
    "    sfh = set([\"Single Family Residential, Has Garage\",\n",
    "    \"Detached\",\n",
    "    \"Single Family Home\",\n",
    "    \"3 Story, Single-Family Home\",\n",
    "    \"Detached, 1 Story, Single-Family Home\",\n",
    "    \"Duet\",\n",
    "    \"1 House on Lot, Detached\",\n",
    "    \"1 House on Lot, Custom, Ranchette/Country\",\n",
    "    \"1 House on Lot, Live/Work, Semi-Custom, Ranchette/Country\",\n",
    "    \"1 House on Lot, Detached, Live/Work\",\n",
    "    \"1 House on Lot, Detached, Custom\",\n",
    "    \"1 House on Lot, Detached, Live/Work, Ranchette/Country\",\n",
    "    \"Single Family Residence\",\n",
    "    \"1 House on Lot, Tract\",\n",
    "    \"1 House on Lot, Detached, Semi-Custom\",\n",
    "    \"1 House on Lot, Detached, Live/Work, Custom, Ranchette/Country\",\n",
    "    \"1 House on Lot, Custom\",\n",
    "    \"Attached, 2 Story, Single-Family Home\",\n",
    "    \"Single Family\",\n",
    "    \"1 House on Lot, Ranchette/Country\",\n",
    "    \"1 House on Lot, Live/Work, Ranchette/Country\",\n",
    "    \"1 House on Lot, Detached, Ranchette/Country\",\n",
    "    \"1 House on Lot, Detached, Planned Unit Develop\",\n",
    "    \"1 House on Lot, Semi-Custom, Ranchette/Country\",\n",
    "    \"1 House on Lot, Attached\",\n",
    "    \"1 House on Lot, Detached, Custom, Ranchette/Country\",\n",
    "    \"1 House on Lot, Attached, Ranchette/Country\",\n",
    "    \"1 House on Lot, Planned Unit Develop\",\n",
    "    \"Single Family Residential, Has Garage, Has View\",\n",
    "    \"Single Family Residential\",\n",
    "    \"Detached, 2 Story, Single-Family Home\",\n",
    "    \"1 Story, Single-Family Home\",\n",
    "    \"1 House on Lot, Detached, Tract\",\n",
    "    \"1 House on Lot, Detached, Planned Unit Develop, Retirement Community\",\n",
    "    \"1 House on Lot, Detached, Tract, Semi-Custom\",\n",
    "    \"Residential, Single Family\",\n",
    "    \"1 House on Lot, Retirement Community\",\n",
    "    \"1 House on Lot, Detached, Fixer\",\n",
    "    \"1 House on Lot, Planned Unit Develop, Tract\",\n",
    "    \"1 House on Lot, Detached, Manufactured\",\n",
    "    \"1 House on Lot, Detached, Planned Unit Develop, Tract\",\n",
    "    \"1 House on Lot, Semi-Custom\",\n",
    "    \"1 House on Lot, Planned Unit Develop, Zero Lot Line\",\n",
    "    \"1 House on Lot, Detached, Zero Lot Line\",\n",
    "    \"1 House on Lot, Zero Lot Line\",\n",
    "    \"Residential Single-Family\",\n",
    "    \"A, Single Family, Housing Estate\",\n",
    "    \"Halfplex, Attached\",\n",
    "    \"1 House on Lot, Attached, Planned Unit Develop\",\n",
    "    \"1 House on Lot, Modular, Ranchette/Country\",\n",
    "    \"1 House on Lot, Detached, Loft\",\n",
    "    \"A, Single Family, Ranch/Farm\",\n",
    "    \"Commercial/Residential\",\n",
    "    \"2 Story, Single-Family Home\",\n",
    "    \"Full, 3 Story, Single-Family Home\",\n",
    "    \"Single-Family Home\",\n",
    "    \"Full, Attached, 1 Story, Single-Family Home\",\n",
    "    \"Detached, Single-Family Home\",\n",
    "    \"Full, Attached, Detached, 2 Story, Single-Family Home\",\n",
    "    \"1 House on Lot, Detached, Tract, Fixer\",\n",
    "    \"1 House on Lot, Attached, Tract\",\n",
    "    \"1 House on Lot, Fixer\",\n",
    "    \"Twinhome\",\n",
    "    \"Semi-Attached, 2 Story, Single-Family Home\",\n",
    "    \"Attached, Single-Family Home\",\n",
    "    \"Full, 2 Story, Single-Family Home\",\n",
    "    \"Full, Attached, 3 Story, Single-Family Home\",\n",
    "    \"Attached, Detached, 2 Story, Single-Family Home\",\n",
    "    \"Full, Detached, 3 Story, Single-Family Home\",\n",
    "    \"Full, Single-Family Home\",\n",
    "    \"3 Story, Split Level, Single-Family Home\",\n",
    "    \"Semi-Attached, 3 Story, Single-Family Home\",\n",
    "    \"Modified, Semi-Attached, Single-Family Home\",\n",
    "    \"Full, Detached, 2 Story, Single-Family Home\",\n",
    "    \"Modified, Detached, Single-Family Home\",\n",
    "    \"Attached, 4+ Story, Single-Family Home\",\n",
    "    \"Semi-Attached, 4+ Story, Single-Family Home\",\n",
    "    \"Split Level, Single-Family Home\",\n",
    "    \"1 House on Lot, Attached, Custom\",\n",
    "    \"Detached, 2 Story, PUD, Single-Family Home\",\n",
    "    \"1 House on Lot, Planned Unit Develop, Custom\",\n",
    "    \"1 House on Lot, Detached, Custom, Fixer\",\n",
    "    \"Residential, Share Ownership\",\n",
    "    \"1 House on Lot, Detached, Live/Work, Custom\",\n",
    "    \"1 House on Lot, Detached, Planned Unit Develop, Custom, Ranchette/Country\",\n",
    "    \"1 House on Lot, Detached, Retirement Community\",\n",
    "    \"1 House on Lot, Planned Unit Develop, Retirement Community\",\n",
    "    \"1 House on Lot, Tract, Semi-Custom\",\n",
    "    \"1 House on Lot, Detached, Planned Unit Develop, Custom\",\n",
    "    \"1 House on Lot, Attached, Planned Unit Develop, Zero Lot Line\",\n",
    "    \"1 House on Lot, Attached, Retirement Community\",\n",
    "    \"1 House on Lot, Detached, Zero Lot Line, Tract\",\n",
    "    \"1 House on Lot, Attached, Fixer\",\n",
    "    \"Halfplex, Detached\",\n",
    "    \"1 House on Lot, Detached, Planned Unit Develop, Semi-Custom\",\n",
    "    \"Residential\",\n",
    "    \"Residential, HUD, Single Family\",\n",
    "    \"Residential, Single Family, HUD\",\n",
    "    \"Single Family Detached\",\n",
    "    \"Residential, Single Family, Manufactured Home\",\n",
    "    \"Residential, New Construction\",\n",
    "    \"A, Condo/Townhouse, Housing Estate\",\n",
    "    \"A, Condo/Townhouse, Planned Unit Development\",\n",
    "    \"2 Story, Fixer Upper, Single-Family Home\",\n",
    "    \"3 Story, Fixer Upper, Single-Family Home\",\n",
    "    \"A, Single Family, Planned Unit Development\",\n",
    "    \"Attached, 3 Story, Single-Family Home\",\n",
    "    \"Residential, New Construction, Single Family\",\n",
    "    \"Residential, Single Family, New Construction\",\n",
    "    \"Single Family, Residential Single-Family\",\n",
    "    \"1 House on Lot, Attached, Custom, Fixer\",\n",
    "    \"1 House on Lot, Attached, Semi-Custom\",\n",
    "    \"1 House on Lot, Attached, Semi-Custom, Ranchette/Country\",\n",
    "    \"1 House on Lot, Detached, Custom, Fixer, Ranchette/Country\",\n",
    "    \"1 House on Lot, Detached, Live/Work, Semi-Custom, Ranchette/Country\",\n",
    "    \"1 House on Lot, Detached, Loft, Planned Unit Develop, Zero Lot Line\",\n",
    "    \"1 House on Lot, Detached, Planned Unit Develop, Semi-Custom, Retirement Community\",\n",
    "    \"1 House on Lot, Detached, Planned Unit Develop, Zero Lot Line\",\n",
    "    \"1 House on Lot, Detached, Tract, Custom\",\n",
    "    \"1 House on Lot, Live/Work\",\n",
    "    \"1 House on Lot, Planned Unit Develop, Tract, Retirement Community\",\n",
    "    \"1 House on Lot, Tract, Fixer\",\n",
    "    \"1 House on Lot, Tract, Semi-Custom, Retirement Community\"\n",
    "    ])\n",
    "\n",
    "    town = set([\"Townhouse\",\n",
    "    \"Condominium, Townhouse, Planned Unit Develop\",\n",
    "    \"Townhouse, Has Garage\",\n",
    "    \"Townhouse, Has Garage, Has View\",\n",
    "    \"1 House on Lot, Townhouse\",\n",
    "    \"1 House on Lot, Townhouse, Planned Unit Develop\",\n",
    "    \"Townhome\",\n",
    "    \"1 House on Lot, Attached, Townhouse\",\n",
    "    \"1 House on Lot, Townhouse, Planned Unit Develop\",\n",
    "    \"Residential, Townhouse\",\n",
    "    \"Townhouse, 2 Level, Tenancy In Common\",\n",
    "    \"Townhouse, 3 Story, Single-Family Home\",\n",
    "    \"Penthouse, Top Floor, Tenancy In Common\"])\n",
    "    \n",
    "    \n",
    "    #updating bikeable column to have only 3 values - Please add your conditions within this loop with your name initials\n",
    "    for i in df.index.values:\n",
    "        if df.loc[i,'bikeable'] == \"Biker's Paradise\" or df.loc[i,'bikeable'] == \"Rider's Paradise\":\n",
    "            df.loc[i,'bikeable'] = \"Very Bikeable\"\n",
    "        \n",
    "        if df.loc[i,'transit'] == \"Some Transit\":\n",
    "            df.loc[i,'transit'] = \"Minimal Transit\"\n",
    "        \n",
    "        if df.loc[i,'walkable'] == \"Walker's Paradise\":\n",
    "            df.loc[i,'walkable'] = \"Very Walkable\"\n",
    "            \n",
    "        #on_redfin roundup to one\n",
    "        if 'hour' in df.loc[i,'on_redfin']:\n",
    "            df.loc[i,'on_redfin'] = '1'\n",
    "        if 'min' in df.loc[i,'on_redfin']:\n",
    "            df.loc[i,'on_redfin'] = '1'\n",
    "        if 'Active' in df.loc[i,'on_redfin']:\n",
    "            df.loc[i,'on_redfin'] = '0'\n",
    "        if 'New' in df.loc[i,'on_redfin']:\n",
    "            df.loc[i,'on_redfin'] = '0'\n",
    "            \n",
    "        if 'estimate_price' in df.columns.values and str(df.loc[i,'estimate_price']).isnumeric()==False:\n",
    "            df.loc[i,'estimate_price'] = df.loc[i,'estimate_price'].replace('—','').replace(',', '').replace('$','').replace('+','')\n",
    "            df.loc[i,'estimate_price'] = pd.to_numeric(df.loc[i,'estimate_price'],errors='coerce',downcast='float')\n",
    "            \n",
    "        elif 'price' in df.columns.values and str(df.loc[i,'price']).isnumeric()==False:\n",
    "            df.loc[i,'price'] = df.loc[i,'price'].replace('—','').replace(',', '').replace('$','').replace('+','')\n",
    "            df.loc[i,'price'] = pd.to_numeric(df.loc[i,'price'],errors='coerce',downcast='float')\n",
    "        \n",
    "        #converting Price to numeric\n",
    "        if 'sold_price_list' in df.columns.values and str(df.loc[i,'sold_price_list']).isnumeric()==False:\n",
    "            df.loc[i,'sold_price_list'] = df.loc[i,'sold_price_list'].replace('—','').replace(',', '').replace('$','').replace('+','')\n",
    "            df.loc[i,'sold_price_list'] = pd.to_numeric(df.loc[i,'sold_price_list'],errors='coerce',downcast='float')\n",
    "        \n",
    "        if df.loc[i,'type'] in agri:\n",
    "            df.loc[i,'type'] = 'Agricultural'\n",
    "        elif df.loc[i,'type'] in condo:\n",
    "            df.loc[i,'type'] = 'Condominium'\n",
    "        elif df.loc[i,'type'] in coop:\n",
    "            df.loc[i,'type'] = 'Cooperative'\n",
    "        elif df.loc[i,'type'] in farm:\n",
    "            df.loc[i,'type'] = 'Farm/Ranch'\n",
    "        elif df.loc[i,'type'] in lots:\n",
    "            df.loc[i,'type'] = 'Lots and Land'\n",
    "        elif df.loc[i,'type'] in mobile:\n",
    "            df.loc[i,'type'] = 'Mobile/Manufactured'\n",
    "        elif df.loc[i,'type'] in multi:\n",
    "            df.loc[i,'type'] = 'Multi Family'\n",
    "        elif df.loc[i,'type'] in other:\n",
    "            df.loc[i,'type'] = 'Other'\n",
    "        elif df.loc[i,'type'] in sfh:\n",
    "            df.loc[i,'type'] = 'Single Family'\n",
    "        elif df.loc[i,'type'] in town:\n",
    "            df.loc[i,'type'] = 'Townhouse'\n",
    "        elif df.loc[i,'type'] in cabin:\n",
    "            df.loc[i,'type'] = 'Cabin'\n",
    "        elif df.loc[i,'type'] in commercial:\n",
    "            df.loc[i,'type'] = 'Commercial'\n",
    "        else:\n",
    "            df.loc[i,'type'] = 'NA'\n",
    "    \n",
    "    if  'on_redfin' in df.columns.values:\n",
    "        df['on_redfin'] = df['on_redfin'].str.replace('days', '')\n",
    "    \n",
    "    if  'status' in df.columns.values:\n",
    "        df['status'] = df['status'].str.replace('GreatSchools Rating', '')\n",
    "          \n",
    "        \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing Collated Files NOTE: Replace file here with this \"Redfin_New_Collated.xlsx\" Name\n",
    "df = pd.read_excel('Redfin_Sold_Collated.xlsx')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# executing function output cleaned data into a dataframe\n",
    "df = data_cleaning(df)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for exporting cleaned file from a dataframe\n",
    "def data_cleaned_file(df_final):\n",
    "    writer=pd.ExcelWriter('Redfin_SoldProperty_CleanedData.xlsx') #[ACTION]:Perform the same code to save data for NewListing\n",
    "    df_final.to_excel(writer,'Sold',index=False) #[ACTION]:change the tab name to New \n",
    "    writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# executing function to save cleaned data in excel file\n",
    "data_cleaned_file(df)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
